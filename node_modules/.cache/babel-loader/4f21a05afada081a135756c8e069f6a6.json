{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javam\\\\Desktop\\\\Development\\\\React\\\\Practice React\\\\src\\\\components\\\\Profile\\\\ProfileForm.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./ProfileForm.module.css\";\nimport useInput from \"../../hooks/useInput\";\nimport useHttp from \"../../hooks/useHttp\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport Notification from \"../UI/Notification\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport forgotPass from \"../../assets/forgotPass.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ProfileForm = () => {\n  _s();\n\n  const authCtx = useContext(AuthContext);\n  let isFormValid = false;\n  const [notification, setNotification] = useState(null);\n  const [passDontMatch, setPassDontMatch] = useState(false);\n  const {\n    inputValue: newPassInput,\n    isInputTouched: isNewPassTouched,\n    isInputValid: isNewPassValid,\n    handleInputChange: handleNewPassChange,\n    handleInputBlur: handleNewPassBlur,\n    resetInput: resetNewPass\n  } = useInput(pass => pass.length > 7);\n  const {\n    inputValue: confirmPassInput,\n    isInputTouched: isConfirmPassTouched,\n    isInputValid: isConfirmPassValid,\n    handleInputChange: handleConfirmPassChange,\n    handleInputBlur: handleConfirmPassBlur,\n    resetInput: resetConfirmPass\n  } = useInput(pass => pass.length > 7);\n\n  if (isNewPassValid && isConfirmPassValid) {\n    isFormValid = true;\n  }\n\n  const {\n    data,\n    error,\n    status,\n    sendRequest\n  } = useHttp();\n  const loading = status === \"pending\";\n\n  function handleFormSubmit(e) {\n    e.preventDefault(); //clear previous errors\n\n    setPassDontMatch(false); //checking if both passwords match\n\n    if (newPassInput !== confirmPassInput) {\n      setPassDontMatch(true);\n      return;\n    } //password matches send request\n\n\n    sendRequest({\n      url: \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=\",\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: {\n        idToken: authCtx.token,\n        password: newPassInput\n      }\n    });\n  } //resetting form\n\n\n  const resetProfileForm = useCallback(() => {\n    resetNewPass();\n    resetConfirmPass();\n  }, [resetNewPass, resetConfirmPass]);\n  useEffect(() => {\n    if (status === \"completed\") {\n      if (error) {\n        setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n          heading: \"Error\",\n          type: \"error\",\n          error: {\n            message: error\n          },\n          message: error,\n          hideNotification: () => setNotification(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this));\n        return;\n      }\n\n      let {\n        error: errorFromFirebase\n      } = data;\n\n      if (errorFromFirebase) {\n        setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n          heading: \"Error\",\n          type: \"error\",\n          error: errorFromFirebase,\n          hideNotification: () => setNotification(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this));\n      } //success\n\n\n      if (!error && !errorFromFirebase && data) {\n        setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n          heading: \"Success\",\n          type: \"success\",\n          error: \"\",\n          message: \"Password has changed successfully ! You can now login with new Password\",\n          hideNotification: () => setNotification(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this));\n        resetProfileForm();\n        return;\n      }\n\n      return () => {\n        //clean up function\n        //clear any previous notifications\n        setNotification(null);\n      };\n    }\n  }, [data, error, status, resetProfileForm]);\n  const invalidNewPass = isNewPassTouched && !isNewPassValid;\n  const invalidConfirmPass = isConfirmPassTouched && !isConfirmPassValid;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 19\n    }, this), notification, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"profile-form-div\"],\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: classes[\"img-div\"],\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: forgotPass,\n          alt: \"Forgot Password ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: classes[\"form-div\"],\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.form,\n          onSubmit: handleFormSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: classes.header,\n            children: \"Password Change Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), passDontMatch && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: \"center\"\n            },\n            className: classes.errorText,\n            children: \"Passwords do not match ! Try again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-password\",\n              children: \"New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: invalidNewPass ? classes.invalid : \"\",\n              value: newPassInput,\n              onChange: handleNewPassChange,\n              onBlur: handleNewPassBlur,\n              id: \"new-password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), invalidNewPass && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.errorText,\n              children: \"Password must be more than 7 characters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"new-password-confirm\",\n              children: \"Confirm New Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              className: invalidConfirmPass ? classes.invalid : \"\",\n              value: confirmPassInput,\n              onChange: handleConfirmPassChange,\n              onBlur: handleConfirmPassBlur,\n              id: \"new-password-confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), invalidConfirmPass && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: classes.errorText,\n              children: \"Password must be more than 7 characters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.action,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              type: \"submit\",\n              disabled: !isFormValid,\n              children: \"Change Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileForm, \"4SaVkMuyThDEstgU77IZvjKKnss=\", false, function () {\n  return [useInput, useInput, useHttp];\n});\n\n_c = ProfileForm;\nexport default ProfileForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileForm\");","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/React/Practice React/src/components/Profile/ProfileForm.js"],"names":["classes","useInput","useHttp","useCallback","useContext","useEffect","useState","AuthContext","Notification","LoadingSpinner","forgotPass","ProfileForm","authCtx","isFormValid","notification","setNotification","passDontMatch","setPassDontMatch","inputValue","newPassInput","isInputTouched","isNewPassTouched","isInputValid","isNewPassValid","handleInputChange","handleNewPassChange","handleInputBlur","handleNewPassBlur","resetInput","resetNewPass","pass","length","confirmPassInput","isConfirmPassTouched","isConfirmPassValid","handleConfirmPassChange","handleConfirmPassBlur","resetConfirmPass","data","error","status","sendRequest","loading","handleFormSubmit","e","preventDefault","url","method","headers","body","idToken","token","password","resetProfileForm","message","errorFromFirebase","invalidNewPass","invalidConfirmPass","form","header","textAlign","errorText","control","invalid","action"],"mappings":"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","sourcesContent":["import classes from \"./ProfileForm.module.css\";\nimport useInput from \"../../hooks/useInput\";\nimport useHttp from \"../../hooks/useHttp\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport Notification from \"../UI/Notification\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport forgotPass from \"../../assets/forgotPass.png\";\n\nconst ProfileForm = () => {\n  const authCtx = useContext(AuthContext);\n  let isFormValid = false;\n  const [notification, setNotification] = useState(null);\n  const [passDontMatch, setPassDontMatch] = useState(false);\n  const {\n    inputValue: newPassInput,\n    isInputTouched: isNewPassTouched,\n    isInputValid: isNewPassValid,\n    handleInputChange: handleNewPassChange,\n    handleInputBlur: handleNewPassBlur,\n    resetInput: resetNewPass,\n  } = useInput((pass) => pass.length > 7);\n\n  const {\n    inputValue: confirmPassInput,\n    isInputTouched: isConfirmPassTouched,\n    isInputValid: isConfirmPassValid,\n    handleInputChange: handleConfirmPassChange,\n    handleInputBlur: handleConfirmPassBlur,\n    resetInput: resetConfirmPass,\n  } = useInput((pass) => pass.length > 7);\n\n  if (isNewPassValid && isConfirmPassValid) {\n    isFormValid = true;\n  }\n\n  const { data, error, status, sendRequest } = useHttp();\n  const loading = status === \"pending\";\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n    //clear previous errors\n    setPassDontMatch(false);\n    //checking if both passwords match\n    if (newPassInput !== confirmPassInput) {\n      setPassDontMatch(true);\n      return;\n    }\n    //password matches send request\n    sendRequest({\n      url: \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=\",\n      method: \"POST\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: { idToken: authCtx.token, password: newPassInput },\n    });\n  }\n\n  //resetting form\n  const resetProfileForm = useCallback(() => {\n    resetNewPass();\n    resetConfirmPass();\n  }, [resetNewPass, resetConfirmPass]);\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      if (error) {\n        setNotification(\n          <Notification\n            heading=\"Error\"\n            type=\"error\"\n            error={{ message: error }}\n            message={error}\n            hideNotification={() => setNotification(null)}\n          />\n        );\n        return;\n      }\n\n      let { error: errorFromFirebase } = data;\n      if (errorFromFirebase) {\n        setNotification(\n          <Notification\n            heading=\"Error\"\n            type=\"error\"\n            error={errorFromFirebase}\n            hideNotification={() => setNotification(null)}\n          />\n        );\n      }\n\n      //success\n      if (!error && !errorFromFirebase && data) {\n        setNotification(\n          <Notification\n            heading=\"Success\"\n            type=\"success\"\n            error=\"\"\n            message={\n              \"Password has changed successfully ! You can now login with new Password\"\n            }\n            hideNotification={() => setNotification(null)}\n          />\n        );\n        resetProfileForm();\n        return;\n      }\n\n      return () => {\n        //clean up function\n        //clear any previous notifications\n        setNotification(null);\n      };\n    }\n  }, [data, error, status, resetProfileForm]);\n\n  const invalidNewPass = isNewPassTouched && !isNewPassValid;\n  const invalidConfirmPass = isConfirmPassTouched && !isConfirmPassValid;\n\n  return (\n    <>\n      {loading && <LoadingSpinner />}\n      {notification}\n      <div className={classes[\"profile-form-div\"]}>\n        <section className={classes[\"img-div\"]}>\n          <img src={forgotPass} alt=\"Forgot Password ?\" />\n        </section>\n        <section className={classes[\"form-div\"]}>\n          <form className={classes.form} onSubmit={handleFormSubmit}>\n            <h2 className={classes.header}>Password Change Form</h2>\n            {passDontMatch && (\n              <p style={{ textAlign: \"center\" }} className={classes.errorText}>\n                Passwords do not match ! Try again\n              </p>\n            )}\n            <div className={classes.control}>\n              <label htmlFor=\"new-password\">New Password</label>\n              <input\n                type=\"password\"\n                className={invalidNewPass ? classes.invalid : \"\"}\n                value={newPassInput}\n                onChange={handleNewPassChange}\n                onBlur={handleNewPassBlur}\n                id=\"new-password\"\n              />\n              {invalidNewPass && (\n                <p className={classes.errorText}>\n                  Password must be more than 7 characters\n                </p>\n              )}\n              <label htmlFor=\"new-password-confirm\">Confirm New Password</label>\n              <input\n                type=\"password\"\n                className={invalidConfirmPass ? classes.invalid : \"\"}\n                value={confirmPassInput}\n                onChange={handleConfirmPassChange}\n                onBlur={handleConfirmPassBlur}\n                id=\"new-password-confirm\"\n              />\n              {invalidConfirmPass && (\n                <p className={classes.errorText}>\n                  Password must be more than 7 characters\n                </p>\n              )}\n            </div>\n            <div className={classes.action}>\n              <button className=\"btn\" type=\"submit\" disabled={!isFormValid}>\n                Change Password\n              </button>\n            </div>\n          </form>\n        </section>\n      </div>\n    </>\n  );\n};\n\nexport default ProfileForm;\n"]},"metadata":{},"sourceType":"module"}