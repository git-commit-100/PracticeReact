{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\javam\\\\Desktop\\\\Development\\\\React\\\\Practice React\\\\src\\\\components\\\\Auth\\\\AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/useHttp\";\nimport useInput from \"../../hooks/useInput\";\nimport classes from \"./AuthForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport Notification from \"../UI/Notification\";\nimport { AuthContext } from \"../../store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  let isFormValid = false;\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [notification, setNotification] = useState(null);\n  const {\n    data,\n    error,\n    status,\n    sendRequest\n  } = useHttp();\n  const loading = status === \"pending\";\n  useEffect(() => {\n    if (status === \"completed\") {\n      // handle cases\n      if (error) {\n        setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n          heading: \"Error\",\n          type: \"error\",\n          error: {\n            message: error\n          },\n          message: error,\n          hideNotification: () => setNotification(null)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this));\n        return;\n      }\n\n      let {\n        error: errorFromFirebase\n      } = data;\n\n      if (errorFromFirebase) {\n        setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n          heading: \"Error\",\n          type: \"error\",\n          error: errorFromFirebase,\n          hideNotification: () => setNotification(null),\n          message: \"Email already exists ! Login to continue.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this));\n      }\n\n      if (!errorFromFirebase && data) {\n        //checking whether success msg is for login or signup\n        let {\n          kind\n        } = data;\n\n        if (kind === \"identitytoolkit#SignupNewUserResponse\") {\n          //signup\n          setNotification( /*#__PURE__*/_jsxDEV(Notification, {\n            heading: \"Success\",\n            type: \"success\",\n            error: {\n              message: \"\"\n            },\n            hideNotification: () => setNotification(null),\n            message: \"Signup Successful ! Login to continue.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this));\n          return;\n        } else {\n          // logging user in\n          authCtx.login(data.idToken);\n          return;\n        }\n      }\n    }\n\n    return () => {\n      //cleanup function\n      //clear previous notification\n      setNotification(null);\n    };\n  }, [status, data, error, authCtx]);\n  const {\n    inputValue: emailInput,\n    isInputValid: isEmailValid,\n    isInputTouched: isEmailTouched,\n    handleInputChange: handleEmailChange,\n    handleInputBlur: handleEmailBlur\n  } = useInput(email => email.trim() !== \"\" && email.includes(\"@\") && email.includes(\".\"));\n  const {\n    inputValue: passwordInput,\n    isInputValid: isPasswordValid,\n    isInputTouched: isPasswordTouched,\n    handleInputChange: handlePasswordChange,\n    handleInputBlur: handlePasswordBlur\n  } = useInput(pass => pass.length > 7);\n\n  if (isEmailValid && isPasswordValid) {\n    isFormValid = true;\n  }\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (isLogin) {\n      //...login\n      const user = {\n        email: emailInput,\n        password: passwordInput\n      };\n      sendRequest({\n        url: \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\",\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: user\n      });\n      return;\n    } else {\n      //...signup\n      const newUser = {\n        id: new Date().getTime(),\n        email: emailInput,\n        password: passwordInput\n      };\n      sendRequest({\n        url: \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\",\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: newUser\n      });\n      return;\n    }\n  } //DOM helpers\n\n\n  const invalidEmail = isEmailTouched && !isEmailValid;\n  const invalidPassword = isPasswordTouched && !isPasswordValid;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }, this), notification, /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.auth,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: isLogin ? \"Login\" : \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Your Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"email\",\n            className: invalidEmail ? classes.invalid : classes.valid,\n            value: emailInput,\n            onChange: handleEmailChange,\n            onBlur: handleEmailBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), invalidEmail && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.errorText,\n            children: \"Enter a valid email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            className: invalidPassword ? classes.invalid : \"\",\n            value: passwordInput,\n            onChange: handlePasswordChange,\n            onBlur: handlePasswordBlur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), invalidPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes.errorText,\n            children: \"Password must be more than 7 characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn login-btn\",\n            disabled: !isFormValid,\n            type: \"submit\",\n            children: isLogin ? \"Login\" : \"Create Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: classes.toggle,\n            onClick: switchAuthModeHandler,\n            children: isLogin ? \"Create new account\" : \"Login with existing account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AuthForm, \"2FdnpT2N9xMr6Sd4yq39urrvoeU=\", false, function () {\n  return [useHttp, useInput, useInput];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/React/Practice React/src/components/Auth/AuthForm.js"],"names":["useContext","useEffect","useState","useHttp","useInput","classes","LoadingSpinner","Notification","AuthContext","AuthForm","isFormValid","authCtx","isLogin","setIsLogin","notification","setNotification","data","error","status","sendRequest","loading","message","errorFromFirebase","kind","login","idToken","inputValue","emailInput","isInputValid","isEmailValid","isInputTouched","isEmailTouched","handleInputChange","handleEmailChange","handleInputBlur","handleEmailBlur","email","trim","includes","passwordInput","isPasswordValid","isPasswordTouched","handlePasswordChange","handlePasswordBlur","pass","length","switchAuthModeHandler","prevState","handleFormSubmit","e","preventDefault","user","password","url","method","headers","body","newUser","id","Date","getTime","invalidEmail","invalidPassword","auth","control","invalid","valid","errorText","actions","toggle"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/useHttp\";\nimport useInput from \"../../hooks/useInput\";\nimport classes from \"./AuthForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport Notification from \"../UI/Notification\";\nimport { AuthContext } from \"../../store/auth-context\";\n\nconst AuthForm = () => {\n  let isFormValid = false;\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const [notification, setNotification] = useState(null);\n  const { data, error, status, sendRequest } = useHttp();\n  const loading = status === \"pending\";\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      // handle cases\n      if (error) {\n        setNotification(\n          <Notification\n            heading=\"Error\"\n            type=\"error\"\n            error={{ message: error }}\n            message={error}\n            hideNotification={() => setNotification(null)}\n          />\n        );\n        return;\n      }\n\n      let { error: errorFromFirebase } = data;\n      if (errorFromFirebase) {\n        setNotification(\n          <Notification\n            heading=\"Error\"\n            type=\"error\"\n            error={errorFromFirebase}\n            hideNotification={() => setNotification(null)}\n            message={\"Email already exists ! Login to continue.\"}\n          />\n        );\n      }\n\n      if (!errorFromFirebase && data) {\n        //checking whether success msg is for login or signup\n        let { kind } = data;\n        if (kind === \"identitytoolkit#SignupNewUserResponse\") {\n          //signup\n          setNotification(\n            <Notification\n              heading=\"Success\"\n              type=\"success\"\n              error={{ message: \"\" }}\n              hideNotification={() => setNotification(null)}\n              message=\"Signup Successful ! Login to continue.\"\n            />\n          );\n          return;\n        } else {\n          // logging user in\n          authCtx.login(data.idToken);\n          return;\n        }\n      }\n    }\n\n    return () => {\n      //cleanup function\n      //clear previous notification\n      setNotification(null);\n    };\n  }, [status, data, error, authCtx]);\n\n  const {\n    inputValue: emailInput,\n    isInputValid: isEmailValid,\n    isInputTouched: isEmailTouched,\n    handleInputChange: handleEmailChange,\n    handleInputBlur: handleEmailBlur,\n  } = useInput(\n    (email) => email.trim() !== \"\" && email.includes(\"@\") && email.includes(\".\")\n  );\n\n  const {\n    inputValue: passwordInput,\n    isInputValid: isPasswordValid,\n    isInputTouched: isPasswordTouched,\n    handleInputChange: handlePasswordChange,\n    handleInputBlur: handlePasswordBlur,\n  } = useInput((pass) => pass.length > 7);\n\n  if (isEmailValid && isPasswordValid) {\n    isFormValid = true;\n  }\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (isLogin) {\n      //...login\n      const user = { email: emailInput, password: passwordInput };\n      sendRequest({\n        url: \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\",\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json\" },\n        body: user,\n      });\n      return;\n    } else {\n      //...signup\n      const newUser = {\n        id: new Date().getTime(),\n        email: emailInput,\n        password: passwordInput,\n      };\n      sendRequest({\n        url: \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\",\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json\" },\n        body: newUser,\n      });\n      return;\n    }\n  }\n\n  //DOM helpers\n  const invalidEmail = isEmailTouched && !isEmailValid;\n  const invalidPassword = isPasswordTouched && !isPasswordValid;\n\n  return (\n    <>\n      {loading && <LoadingSpinner />}\n      {notification}\n      <section className={classes.auth}>\n        <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n        <form onSubmit={handleFormSubmit}>\n          <div className={classes.control}>\n            <label htmlFor=\"email\">Your Email</label>\n            <input\n              type=\"text\"\n              id=\"email\"\n              className={invalidEmail ? classes.invalid : classes.valid}\n              value={emailInput}\n              onChange={handleEmailChange}\n              onBlur={handleEmailBlur}\n            />\n            {invalidEmail && (\n              <p className={classes.errorText}>Enter a valid email</p>\n            )}\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"password\">Your Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              className={invalidPassword ? classes.invalid : \"\"}\n              value={passwordInput}\n              onChange={handlePasswordChange}\n              onBlur={handlePasswordBlur}\n            />\n            {invalidPassword && (\n              <p className={classes.errorText}>\n                Password must be more than 7 characters\n              </p>\n            )}\n          </div>\n          <div className={classes.actions}>\n            <button\n              className=\"btn login-btn\"\n              disabled={!isFormValid}\n              type=\"submit\"\n            >\n              {isLogin ? \"Login\" : \"Create Account\"}\n            </button>\n            <button\n              type=\"button\"\n              className={classes.toggle}\n              onClick={switchAuthModeHandler}\n            >\n              {isLogin ? \"Create new account\" : \"Login with existing account\"}\n            </button>\n          </div>\n        </form>\n      </section>\n    </>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}