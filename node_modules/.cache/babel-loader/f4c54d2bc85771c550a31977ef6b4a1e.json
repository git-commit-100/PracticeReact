{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartItemsSlice = createSlice({\n  name: \"cartItemsSlice\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalPrice: 0,\n    isChanged: false\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const itemToBeAdded = action.payload;\n      const itemInCart = state.items.find(item => item.id === itemToBeAdded.id);\n\n      if (!itemInCart) {\n        state.items.push(itemToBeAdded);\n      } else {\n        itemInCart.quantity++;\n      }\n\n      state.isChanged = true;\n      state.totalQuantity++;\n      state.totalPrice = state.totalPrice + itemToBeAdded.price;\n    },\n\n    removeItemFromCart(state, action) {\n      const itemToBeRemoved = action.payload;\n      const itemInCart = state.items.find(item => item.id === itemToBeRemoved.id);\n\n      if (itemInCart.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== itemToBeRemoved.id);\n      } else {\n        itemInCart.quantity--;\n      }\n\n      state.isChanged = true;\n      state.totalQuantity--;\n      state.totalPrice = state.totalPrice - itemToBeRemoved.price;\n    },\n\n    replaceCart(state, action) {\n      //state was not changing, so forcefully made state change\n      state = Object.assign(state, action.payload);\n    }\n\n  }\n});\nexport const cartItemsActions = cartItemsSlice.actions;\nexport default cartItemsSlice;","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/Practice React/src/store/cartItemsSlice.js"],"names":["createSlice","cartItemsSlice","name","initialState","items","totalQuantity","totalPrice","isChanged","reducers","addItemToCart","state","action","itemToBeAdded","payload","itemInCart","find","item","id","push","quantity","price","removeItemFromCart","itemToBeRemoved","filter","replaceCart","Object","assign","cartItemsActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,cAAc,GAAGD,WAAW,CAAC;AACjCE,EAAAA,IAAI,EAAE,gBAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,aAAa,EAAE,CAFH;AAGZC,IAAAA,UAAU,EAAE,CAHA;AAIZC,IAAAA,SAAS,EAAE;AAJC,GAFmB;AAQjCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,aAAa,GAAGD,MAAM,CAACE,OAA7B;AACA,YAAMC,UAAU,GAAGJ,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAChBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,aAAa,CAACK,EADnB,CAAnB;;AAGA,UAAI,CAACH,UAAL,EAAiB;AACfJ,QAAAA,KAAK,CAACN,KAAN,CAAYc,IAAZ,CAAiBN,aAAjB;AACD,OAFD,MAEO;AACLE,QAAAA,UAAU,CAACK,QAAX;AACD;;AACDT,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAACL,aAAN;AACAK,MAAAA,KAAK,CAACJ,UAAN,GAAmBI,KAAK,CAACJ,UAAN,GAAmBM,aAAa,CAACQ,KAApD;AACD,KAdO;;AAgBRC,IAAAA,kBAAkB,CAACX,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMW,eAAe,GAAGX,MAAM,CAACE,OAA/B;AACA,YAAMC,UAAU,GAAGJ,KAAK,CAACN,KAAN,CAAYW,IAAZ,CAChBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYK,eAAe,CAACL,EADrB,CAAnB;;AAGA,UAAIH,UAAU,CAACK,QAAX,KAAwB,CAA5B,EAA+B;AAC7BT,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYmB,MAAZ,CACXP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYK,eAAe,CAACL,EAD1B,CAAd;AAGD,OAJD,MAIO;AACLH,QAAAA,UAAU,CAACK,QAAX;AACD;;AACDT,MAAAA,KAAK,CAACH,SAAN,GAAkB,IAAlB;AACAG,MAAAA,KAAK,CAACL,aAAN;AACAK,MAAAA,KAAK,CAACJ,UAAN,GAAmBI,KAAK,CAACJ,UAAN,GAAmBgB,eAAe,CAACF,KAAtD;AACD,KA/BO;;AAiCRI,IAAAA,WAAW,CAACd,KAAD,EAAQC,MAAR,EAAgB;AACzB;AACAD,MAAAA,KAAK,GAAGe,MAAM,CAACC,MAAP,CAAchB,KAAd,EAAqBC,MAAM,CAACE,OAA5B,CAAR;AACD;;AApCO;AARuB,CAAD,CAAlC;AAgDA,OAAO,MAAMc,gBAAgB,GAAG1B,cAAc,CAAC2B,OAAxC;AAEP,eAAe3B,cAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartItemsSlice = createSlice({\r\n  name: \"cartItemsSlice\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    totalPrice: 0,\r\n    isChanged: false,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const itemToBeAdded = action.payload;\r\n      const itemInCart = state.items.find(\r\n        (item) => item.id === itemToBeAdded.id\r\n      );\r\n      if (!itemInCart) {\r\n        state.items.push(itemToBeAdded);\r\n      } else {\r\n        itemInCart.quantity++;\r\n      }\r\n      state.isChanged = true;\r\n      state.totalQuantity++;\r\n      state.totalPrice = state.totalPrice + itemToBeAdded.price;\r\n    },\r\n\r\n    removeItemFromCart(state, action) {\r\n      const itemToBeRemoved = action.payload;\r\n      const itemInCart = state.items.find(\r\n        (item) => item.id === itemToBeRemoved.id\r\n      );\r\n      if (itemInCart.quantity === 1) {\r\n        state.items = state.items.filter(\r\n          (item) => item.id !== itemToBeRemoved.id\r\n        );\r\n      } else {\r\n        itemInCart.quantity--;\r\n      }\r\n      state.isChanged = true;\r\n      state.totalQuantity--;\r\n      state.totalPrice = state.totalPrice - itemToBeRemoved.price;\r\n    },\r\n\r\n    replaceCart(state, action) {\r\n      //state was not changing, so forcefully made state change\r\n      state = Object.assign(state, action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartItemsActions = cartItemsSlice.actions;\r\n\r\nexport default cartItemsSlice;\r\n"]},"metadata":{},"sourceType":"module"}