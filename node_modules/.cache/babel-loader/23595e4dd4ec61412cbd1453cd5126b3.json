{"ast":null,"code":"import { cartItemsActions } from \"./cartItemsSlice\";\nimport { cartActions } from \"./cartSlice\";\nexport function fetchCartData() {\n  return async dispatch => {\n    try {\n      const response = await fetch(\"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Fetching Cart Failed\");\n      }\n\n      const data = await response.json();\n      dispatch(cartItemsActions.replaceCart(data));\n    } catch (err) {\n      dispatch(cartActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: err.message\n      }));\n    }\n  };\n}\nexport function sendCartData(cartData) {\n  return async dispatch => {\n    try {\n      //show pending notification\n      dispatch(cartActions.showNotification({\n        status: \"pending\",\n        title: \"Sending\",\n        message: \"Cart data is being sent.....\"\n      })); //https request\n\n      const response = await fetch(\"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          items: cartData.items,\n          totalQuantity: cartData.totalQuantity,\n          totalPrice: cartData.totalPrice\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      } //success notification\n\n\n      dispatch(cartActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Cart data successfully updated\"\n      }));\n    } catch (err) {\n      dispatch(cartActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: err.message\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/Practice React/src/store/cartActionsThunks.js"],"names":["cartItemsActions","cartActions","fetchCartData","dispatch","response","fetch","ok","Error","data","json","replaceCart","err","showNotification","status","title","message","sendCartData","cartData","method","body","JSON","stringify","items","totalQuantity","totalPrice","statusText"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iEAD0B,CAA5B;;AAIA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEAN,MAAAA,QAAQ,CAACH,gBAAgB,CAACU,WAAjB,CAA6BF,IAA7B,CAAD,CAAR;AACD,KAXD,CAWE,OAAOG,GAAP,EAAY;AACZR,MAAAA,QAAQ,CACNF,WAAW,CAACW,gBAAZ,CAA6B;AAC3BC,QAAAA,MAAM,EAAE,OADmB;AAE3BC,QAAAA,KAAK,EAAE,OAFoB;AAG3BC,QAAAA,OAAO,EAAEJ,GAAG,CAACI;AAHc,OAA7B,CADM,CAAR;AAOD;AACF,GArBD;AAsBD;AAED,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAO,MAAOd,QAAP,IAAoB;AACzB,QAAI;AACF;AACAA,MAAAA,QAAQ,CACNF,WAAW,CAACW,gBAAZ,CAA6B;AAC3BC,QAAAA,MAAM,EAAE,SADmB;AAE3BC,QAAAA,KAAK,EAAE,SAFoB;AAG3BC,QAAAA,OAAO,EAAE;AAHkB,OAA7B,CADM,CAAR,CAFE,CAUF;;AACA,YAAMX,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iEAD0B,EAE1B;AACEa,QAAAA,MAAM,EAAE,KADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,KAAK,EAAEL,QAAQ,CAACK,KADG;AAEnBC,UAAAA,aAAa,EAAEN,QAAQ,CAACM,aAFL;AAGnBC,UAAAA,UAAU,EAAEP,QAAQ,CAACO;AAHF,SAAf;AAFR,OAF0B,CAA5B;;AAYA,UAAI,CAACpB,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACqB,UAAnB,CAAN;AACD,OAzBC,CA2BF;;;AACAtB,MAAAA,QAAQ,CACNF,WAAW,CAACW,gBAAZ,CAA6B;AAC3BC,QAAAA,MAAM,EAAE,SADmB;AAE3BC,QAAAA,KAAK,EAAE,SAFoB;AAG3BC,QAAAA,OAAO,EAAE;AAHkB,OAA7B,CADM,CAAR;AAOD,KAnCD,CAmCE,OAAOJ,GAAP,EAAY;AACZR,MAAAA,QAAQ,CACNF,WAAW,CAACW,gBAAZ,CAA6B;AAC3BC,QAAAA,MAAM,EAAE,OADmB;AAE3BC,QAAAA,KAAK,EAAE,OAFoB;AAG3BC,QAAAA,OAAO,EAAEJ,GAAG,CAACI;AAHc,OAA7B,CADM,CAAR;AAOD;AACF,GA7CD;AA8CD","sourcesContent":["import { cartItemsActions } from \"./cartItemsSlice\";\r\nimport { cartActions } from \"./cartSlice\";\r\n\r\nexport function fetchCartData() {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\"\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Fetching Cart Failed\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      dispatch(cartItemsActions.replaceCart(data));\r\n    } catch (err) {\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          message: err.message,\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport function sendCartData(cartData) {\r\n  return async (dispatch) => {\r\n    try {\r\n      //show pending notification\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"pending\",\r\n          title: \"Sending\",\r\n          message: \"Cart data is being sent.....\",\r\n        })\r\n      );\r\n\r\n      //https request\r\n      const response = await fetch(\r\n        \"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\",\r\n        {\r\n          method: \"PUT\",\r\n          body: JSON.stringify({\r\n            items: cartData.items,\r\n            totalQuantity: cartData.totalQuantity,\r\n            totalPrice: cartData.totalPrice,\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      //success notification\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Cart data successfully updated\",\r\n        })\r\n      );\r\n    } catch (err) {\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          message: err.message,\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}