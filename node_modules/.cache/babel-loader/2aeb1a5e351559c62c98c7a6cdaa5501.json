{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { cartActions } from \"./cartSlice\";\nconst cartItemsSlice = createSlice({\n  name: \"cartItemsSlice\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalPrice: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const itemToBeAdded = action.payload;\n      const itemInCart = state.items.find(item => item.id === itemToBeAdded.id);\n\n      if (!itemInCart) {\n        state.items.push(itemToBeAdded);\n      } else {\n        itemInCart.quantity++;\n      }\n\n      state.totalQuantity++;\n      state.totalPrice = state.totalPrice + itemToBeAdded.price;\n    },\n\n    removeItemFromCart(state, action) {\n      const itemToBeRemoved = action.payload;\n      const itemInCart = state.items.find(item => item.id === itemToBeRemoved.id);\n\n      if (itemInCart.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== itemToBeRemoved.id);\n      } else {\n        itemInCart.quantity--;\n      }\n\n      state.totalQuantity--;\n      state.totalPrice = state.totalPrice - itemToBeRemoved.price;\n    }\n\n  }\n}); //thunk for side-effect code\n\nexport function sendCartData(cartData) {\n  return async dispatch => {\n    try {\n      //show pending notification\n      dispatch(cartActions.showNotification({\n        status: \"pending\",\n        title: \"Sending\",\n        message: \"Cart data is being sent.....\"\n      })); //https request\n\n      const response = await fetch(\"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cartData)\n      });\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      } //success notification\n\n\n      dispatch(cartActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Cart data successfully updated\"\n      }));\n    } catch (err) {\n      dispatch(cartActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: err.message\n      }));\n    }\n  };\n}\nexport const cartItemsActions = cartItemsSlice.actions;\nexport default cartItemsSlice;","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/Practice React/src/store/cartItemsSlice.js"],"names":["createSlice","cartActions","cartItemsSlice","name","initialState","items","totalQuantity","totalPrice","reducers","addItemToCart","state","action","itemToBeAdded","payload","itemInCart","find","item","id","push","quantity","price","removeItemFromCart","itemToBeRemoved","filter","sendCartData","cartData","dispatch","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","statusText","err","cartItemsActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { cartActions } from \"./cartSlice\";\r\n\r\nconst cartItemsSlice = createSlice({\r\n  name: \"cartItemsSlice\",\r\n  initialState: {\r\n    items: [],\r\n    totalQuantity: 0,\r\n    totalPrice: 0,\r\n  },\r\n  reducers: {\r\n    addItemToCart(state, action) {\r\n      const itemToBeAdded = action.payload;\r\n      const itemInCart = state.items.find(\r\n        (item) => item.id === itemToBeAdded.id\r\n      );\r\n      if (!itemInCart) {\r\n        state.items.push(itemToBeAdded);\r\n      } else {\r\n        itemInCart.quantity++;\r\n      }\r\n      state.totalQuantity++;\r\n      state.totalPrice = state.totalPrice + itemToBeAdded.price;\r\n    },\r\n    removeItemFromCart(state, action) {\r\n      const itemToBeRemoved = action.payload;\r\n      const itemInCart = state.items.find(\r\n        (item) => item.id === itemToBeRemoved.id\r\n      );\r\n      if (itemInCart.quantity === 1) {\r\n        state.items = state.items.filter(\r\n          (item) => item.id !== itemToBeRemoved.id\r\n        );\r\n      } else {\r\n        itemInCart.quantity--;\r\n      }\r\n      state.totalQuantity--;\r\n      state.totalPrice = state.totalPrice - itemToBeRemoved.price;\r\n    },\r\n  },\r\n});\r\n\r\n//thunk for side-effect code\r\nexport function sendCartData(cartData) {\r\n  return async (dispatch) => {\r\n    try {\r\n      //show pending notification\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"pending\",\r\n          title: \"Sending\",\r\n          message: \"Cart data is being sent.....\",\r\n        })\r\n      );\r\n\r\n      //https request\r\n      const response = await fetch(\r\n        \"https://react-https-61e56-default-rtdb.firebaseio.com/cart.json\",\r\n        { method: \"PUT\", body: JSON.stringify(cartData) }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      //success notification\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"success\",\r\n          title: \"Success\",\r\n          message: \"Cart data successfully updated\",\r\n        })\r\n      );\r\n    } catch (err) {\r\n      dispatch(\r\n        cartActions.showNotification({\r\n          status: \"error\",\r\n          title: \"Error\",\r\n          message: err.message,\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport const cartItemsActions = cartItemsSlice.actions;\r\n\r\nexport default cartItemsSlice;\r\n"]},"metadata":{},"sourceType":"module"}