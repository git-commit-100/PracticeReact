{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst API_KEY = \"AIzaSyDOBG9uLTA7zw9QadZBKhEWtI48-DYzZfA\";\nconst httpInitialState = {\n  data: null,\n  error: null,\n  status: null\n};\n\nfunction httpReducer(state, action) {\n  if (action.type === \"SEND\") {\n    return {\n      status: \"pending\",\n      error: null,\n      data: null\n    };\n  }\n\n  if (action.type === \"ERROR\") {\n    return {\n      status: \"completed\",\n      error: action.error,\n      data: null\n    };\n  }\n\n  if (action.type === \"SUCCESS\") {\n    return {\n      status: \"completed\",\n      error: null,\n      data: action.response\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp() {\n  _s();\n\n  const [httpState, dispatch] = useReducer(httpReducer, httpInitialState);\n\n  async function sendRequest(requestConfig) {\n    try {\n      dispatch({\n        type: \"SEND\"\n      });\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = requestConfig;\n      const response = await fetch(`${url}${API_KEY}`, {\n        method: method ? method : \"GET\",\n        body: body ? JSON.stringify(body) : null,\n        headers: headers ? headers : {}\n      });\n      const data = await response.json();\n      dispatch({\n        type: \"SUCCESS\",\n        response: data\n      });\n    } catch (error) {\n      dispatch({\n        type: \"ERROR\",\n        error: error.message\n      });\n    }\n  }\n\n  return {\n    data: httpState.data,\n    error: httpState.error,\n    status: httpState.status,\n    sendRequest\n  };\n}\n\n_s(useHttp, \"0ujxAQHU/NLHN4G6q+XseBjEFZ8=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/javam/Desktop/Development/React/Practice React/src/hooks/useHttp.js"],"names":["useReducer","API_KEY","httpInitialState","data","error","status","httpReducer","state","action","type","response","useHttp","httpState","dispatch","sendRequest","requestConfig","url","method","headers","body","fetch","JSON","stringify","json","message"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,OAAO,GAAG,yCAAhB;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,IAAI,EAAE,IADiB;AAEvBC,EAAAA,KAAK,EAAE,IAFgB;AAGvBC,EAAAA,MAAM,EAAE;AAHe,CAAzB;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClC,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AACLJ,MAAAA,MAAM,EAAE,SADH;AAELD,MAAAA,KAAK,EAAE,IAFF;AAGLD,MAAAA,IAAI,EAAE;AAHD,KAAP;AAKD;;AAED,MAAIK,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AACLJ,MAAAA,MAAM,EAAE,WADH;AAELD,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAFT;AAGLD,MAAAA,IAAI,EAAE;AAHD,KAAP;AAKD;;AAED,MAAIK,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,WAAO;AACLJ,MAAAA,MAAM,EAAE,WADH;AAELD,MAAAA,KAAK,EAAE,IAFF;AAGLD,MAAAA,IAAI,EAAEK,MAAM,CAACE;AAHR,KAAP;AAKD;;AAED,SAAOH,KAAP;AACD;;AAED,SAASI,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBb,UAAU,CAACM,WAAD,EAAcJ,gBAAd,CAAxC;;AAEA,iBAAeY,WAAf,CAA2BC,aAA3B,EAA0C;AACxC,QAAI;AACFF,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,YAAM;AAAEO,QAAAA,GAAF;AAAOC,QAAAA,MAAP;AAAeC,QAAAA,OAAf;AAAwBC,QAAAA;AAAxB,UAAiCJ,aAAvC;AACA,YAAML,QAAQ,GAAG,MAAMU,KAAK,CAAE,GAAEJ,GAAI,GAAEf,OAAQ,EAAlB,EAAqB;AAC/CgB,QAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAH,GAAY,KADqB;AAE/CE,QAAAA,IAAI,EAAEA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAH,GAA0B,IAFW;AAG/CD,QAAAA,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa;AAHkB,OAArB,CAA5B;AAMA,YAAMf,IAAI,GAAG,MAAMO,QAAQ,CAACa,IAAT,EAAnB;AACAV,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,QAAQ,EAAEP;AAA7B,OAAD,CAAR;AACD,KAXD,CAWE,OAAOC,KAAP,EAAc;AACdS,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE,OAAR;AAAiBL,QAAAA,KAAK,EAAEA,KAAK,CAACoB;AAA9B,OAAD,CAAR;AACD;AACF;;AAED,SAAO;AACLrB,IAAAA,IAAI,EAAES,SAAS,CAACT,IADX;AAELC,IAAAA,KAAK,EAAEQ,SAAS,CAACR,KAFZ;AAGLC,IAAAA,MAAM,EAAEO,SAAS,CAACP,MAHb;AAILS,IAAAA;AAJK,GAAP;AAMD;;GA1BQH,O;;AA4BT,eAAeA,OAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst API_KEY = \"AIzaSyDOBG9uLTA7zw9QadZBKhEWtI48-DYzZfA\";\r\n\r\nconst httpInitialState = {\r\n  data: null,\r\n  error: null,\r\n  status: null,\r\n};\r\n\r\nfunction httpReducer(state, action) {\r\n  if (action.type === \"SEND\") {\r\n    return {\r\n      status: \"pending\",\r\n      error: null,\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ERROR\") {\r\n    return {\r\n      status: \"completed\",\r\n      error: action.error,\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"SUCCESS\") {\r\n    return {\r\n      status: \"completed\",\r\n      error: null,\r\n      data: action.response,\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction useHttp() {\r\n  const [httpState, dispatch] = useReducer(httpReducer, httpInitialState);\r\n\r\n  async function sendRequest(requestConfig) {\r\n    try {\r\n      dispatch({ type: \"SEND\" });\r\n      const { url, method, headers, body } = requestConfig;\r\n      const response = await fetch(`${url}${API_KEY}`, {\r\n        method: method ? method : \"GET\",\r\n        body: body ? JSON.stringify(body) : null,\r\n        headers: headers ? headers : {},\r\n      });\r\n\r\n      const data = await response.json();\r\n      dispatch({ type: \"SUCCESS\", response: data });\r\n    } catch (error) {\r\n      dispatch({ type: \"ERROR\", error: error.message });\r\n    }\r\n  }\r\n\r\n  return {\r\n    data: httpState.data,\r\n    error: httpState.error,\r\n    status: httpState.status,\r\n    sendRequest,\r\n  };\r\n}\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}